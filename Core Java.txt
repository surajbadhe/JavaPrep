https://www.javamadesoeasy.com/
Tricky Programs : https://www.youtube.com/playlist?list=PLcow8_btriE0fB-UarDDFauM4mS5nsc1F
				  https://www.programiz.com/java-programming/examples/alphabet#:~:text=In%20Java%2C%20the%20char%20variable,z%20is%20stored%20as%20122.
"Java is always pass by value not pass by reference"
--Core Java / J2EE 
1.6 / 1.7 / 1.8 Java feature
Static Imports Java 1.5 feature ? Helps to access any static member of class directly. Ex. we can use out.print("Hello"); No need of system.out
Java 6 Features 
	- Generics: provides compile-time (static) type safety for collections and eliminates the need for most typecasts (type conversion).
	- Annotations
	- Static imports concurrency utilities in package java.util.concurrent.
	- Scanner class for parsing data from various input streams and buffers.
	- StringBuilder class (in java.lang package)
	- Autoboxing/unboxing: automatic conversions between primitive types (such as int) and primitive wrapper classes (such as integer).
	- Metadata: also called annotations; allows language constructs such as classes and methods to be tagged with additional data, which can then be processed by metadata-aware utilities.
	- Enumerations: the enum keyword creates a typesafe, ordered list of values (such as day.monday, day.tuesday, etc.). Previously this could only be achieved by non-typesafe constant integers or manually constructed classes (typesafe enum pattern).
	- Swing: new skinnable look and feel, called synth.
	- Var args: the last parameter of a method can now be declared using a type name followed by three dots (e.g. Void drawtext(string... Lines)). In the calling code any number of parameters of that type can be used and they are then placed in an array to be passed to the method, or alternatively the calling code can pass an array of that type.
	- Enhanced for each loop: the for loop syntax is extended with special syntax for iterating over each member of either an array or any iterable, such as the standard collection classesfix the previously broken semantics of the java memory model, which defines how threads interact through memory.
	- Automatic stub generation for rmi objects.
	- Assertions
	
	
Java 7 Features 
	Strings in switch Statement
	Multi-catch similar exceptions
	Automatic Resource Closing
	Underscore in Numerical Literals
	Binary Literals with Prefix “0b”
	Diamond “<>” Operator
	List<String> s1=new List<>();
	Other features
		Garbage First (G1) garbage collector
		Java NIO 2.0
		More precise Exception rethrow
		Fork Join Framework
Java 8 important new features
	Lambda Expressions
	Functional Interfaces
	Method References
	Interface Default and Static Methods
	Streams API
	Optional
	New Date/Time API
	CompletableFuture
	Repeating Annotations and Extended Annotations Support
	Better Type Inference
	Reflection API Supports Method Parameter Names
	Base64
	Parallel Arrays
	java.util.concurrent Improvements
	Nashorn JavaScript engine
	Class dependency analyzer: jdeps
	JVM changes: Metaspace instead of PermGen

.Java -> Java compiler -> .class(Byte code) -> JVM (Interpreter)

Just in time compiler - JIT compiles bytecodes to machine code at run time and improves the performance of Java applications.Very frequently used methods are compiled as soon as JVM has started, and less used methods are compiled later. 

What are the various memory areas in JVM?
	Class 
	Heap
	Stack 
	program Counter Register
	native method Stack 

ClassLoader in Java? It loads classes from different resources. Java ClassLoader is used to load the classes at run time. In other words, JVM performs the linking process at runtime. 
	Bootstrap class loader - The bootstrap class loader loads the core Java libraries[5] located in the {JAVA_HOME}/lib directory jdk jars rt.jar
	Extensions class loader - The extensions class loader loads the code in the extensions directories {JAVA_HOME}/lib/ext directory
	System Class  Path Loader - The system class loader loads code found on java.class.path, which maps to the system CLASSPATH variable
	Note - So order of execution is starts from System-classpath-loader then extension then Bootstrap Loader.

Java Singleton - scoped by Java classloader , can not create more than one instance per classloader.
OOP 4 principle?
	- Encapsulation ? Is Data Hiding
	- Abstraction ? Abstraction means hiding the implementation.
		- Interface - Achieving pure abstraction 
		- Abstract Class.
	- Inheritance - Inheritance is a process where child class acquires the properties of super class.
	- Polymorphism 
		- Compile time - Method Overloading
		- Runtime - Method Overriding
	Association
		Association refers to the relationship between multiple objects. It refers to how objects are related to each other and how they are using each other's functionality. Composition and aggregation are two types of association.

		One to One
		One to Many
		Many to One, and
		Many to Many
		Let's understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many).can be undirectional or bidirectional.

	Aggregation
		Aggregation is a weak association. An association is said to be aggregation if both Objects can exist independently. For example, a Team object and a Player object. The team contains multiple players but a player can exist without a team.
		Has-A relation ship Ex- Employee HAS-A Address
	Composition
		The composition is the strong type of association. An association is said to composition if an Object owns another object and another object cannot exist without the owner object. Consider the case of Human having a heart. Here Human object contains the heart and heart cannot exist without Human.
There are 3 ways to initialize object in Java?
	By reference variable
	By method
	By constructor
Different Access specifier and Access Modifier?
	Private - more restrictive
	Default
	Protected
	Public - Less Restrictive
	
	Access Specifier	Inside Class	Inside Package	Outside package by subclass	Outside package
	Private				Yes				No				No							No
	Default				Yes				Yes				No							No
	Protected			Yes				Yes				Yes							No
	Public				Yes				Yes				Yes							Yes

4)Which Modifiers are not used for the class? Protected and Private modifiers are not used for a class.

5)Some of the non-access specifiers/modifiers in Java are:

	static
	final
	abstract
	transient
	volatile - It means that changes made by one thread to shared data are visible to other threads.
	synchronized
	native
	
6)Object class methods(Java.lang.Object)- Clone , hashCode , equals , finalize , getClass , wait , notify , notifyAll.

7)Java static keyword? 
	The static can be:
		The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class.
		Static Variable (also known as a class variable) - The static variable can be used to refer to the common property of all objects,EX- the company name, college name.The static variable gets 	memory only once in the class area at the time of class loading
		Method (also known as a class method) 
		Block
		We can not define main class as static only Nested class will
		Static belongs to the class area and an instance belongs to the heap area.

8)Final Keywords - The final keyword in java is used to restrict the user.
	Significance of final in Java?
		Final class cannot be extended 
		Final method cannot be override
		Final member variable cannot be assigned new value
	
Sequence of execution of, instance method, IIB, static block and constructor in java?
	Static Block
	Instance Initialization Block block /What is local Block 
	constructor
	Instance method
	
Garbage collection?	
	GC is the process by which JVM cleans objects (unused objects) from heap to reclaim heap space in java.
	Objects are always created on heap in java

	HotSpot Heap Structure 
		Young Generation -  New objects are allocated in Young generation.
		Old Generation  - Some of the objects which aren't cleaned up survive in young generation and gets aged.  Eventually such objects are moved from young to old generation
		Permanent Generation - Permgen Space contains metadata required by JVM to describe the classes and methods used in the application.
	Throughput garbage collector is the default garbage collector for JVM in java.

	Which methods is called for garbage collection in java?
		Gc (garbage collector) calls finalize method for garbage collection. Ex- System.gc();
		We can force early gc (garbage collection) in java by using following methods >
		   System.gc();
		   Runtime.getRuntime().gc();
		   System.runFinalization();
		   Runtime.getRuntime().runFinalization();

The object cloning is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.
The java.lang.Cloneable interface must be implemented by the class whose object clone we want to create. If we don't implement Cloneable interface, clone() method generates CloneNotSupportedException.
The clone() method is defined in the Object class.	
Cloning in Java?
	Shallow cloning
	Deep Cloning
What is abstract and concrete class ?
	A concrete class is a subclass of an abstract class, which implements all its abstract method.
	Abstract methods cannot have body.
	Abstract class can have static fields and static method, like other classes.
	An abstract class cannot be declared as final.
	Only abstract class can have abstract methods.
	A private, final, static method cannot be abstract, as it cannot be overridden in a subclass.
	Abstract class cannot have abstract constructors.
	Abstract class cannot have abstract static methods.
	If a class extends an abstract class, then it should define all the abstract methods (override) of the base abstract class. If not, the subclass(the class extending abstract class) must also be defined as abstract class.

--Class
InstanceOf and GetClass ?
	InstnaeOf - Comparing current class and sub class as well 
	getClass - Same class is compared
Can we define class as private? No, Only inner class can be private.
Can we define class as private? what will happen if we declare like that? Yes, only inner class can be private 
What is constructor chaining in java? whenever the object of class is created, implicitly default no-arg constructor of class and its super class constructor is called.
Can Constructor throws exception in Java? Yes
Note - Constructor of a class can never be Final in Java and Final class can never be Abstract.
What is the purpose of Constructor class?
	Java provides a Constructor class which can be used to get the internal information of a constructor in the class. It is found in the java.lang.reflect package.
Can we create static constructor? 
	No, we cannot define a static constructor in Java, If we are trying to define a constructor with the static keyword a compile-time error will occur
	Constructor role is only to initializing object and "new" is use to create object.
	Name same as class name , not return any value, cant define it as final , static , abstract, synchronized.
	Can have all access modifiers.
	
Blank Final Variable ?  Are initialize in constructor. 
class BFV{
	final int i;
	BFV(int x){
		i=x;
	}
}
constructor chaining?  Calling default constructor from parameterized constructor, use this keyword to call this(); 
Method Overriding? Method of superclass is overridden in subclass to provide more specific implementation in java.

What is singleton class? Singleton class means only one instance of class can exist.
	Make instance variable as Private and Static 
	Make constructor as private.
	Create public static instance() method.
	Lazy initialization 
	class Singleton{
		private static Singleton instance;
		private Singleton(){}
		public static Singleton getInstance(){
			synchronized (Singleton.class) {
                  if (instance == null)
                        instance = new Singleton();
                  return instance;
			}
		}
		What is double checking lock in singleton?
		Doublechecking Lock 
		public static Singleton getInstance(){
			if (instance == null)
				synchronized (Singleton.class) {
					  if (instance == null)
							instance = new Singleton();
					 
				}
			}
			 return instance;
		}
	}
	
	Eager initialization
	
	class Singleton {
 
		private static final Singleton INSTANCE=new Singleton();
	 
		private Singleton(){
		}
		public static Singleton getInstance() {
					  return INSTANCE;
		}
 
	}
	YES, we can Serialize Singleton class such that object returned by De serialization process is in same state as it was during Serialization time (regardless of any change made to it after Serialization) 
	
What is Singleton class and how to prevent it from multi-threading and cloning?
	class Singleton implements Cloneable {
		private static Singleton instance;
		private Singleton(){}
		public static Singleton getInstance(){
			if (instance == null)
				synchronized (Singleton.class) {
					  if (instance == null)
							instance = new Singleton();
					 
				}
			}
			 return instance;
		}
		@Override
		protected Object clone() throws CloneNotSupportedException {
			throw new CloneNotSupportedException();
			// return super.clone();
		}

	}
When to use volatile variable in Java?
	Java allows threads to access shared variables. As a rule, to ensure that shared variables are consistently updated, a thread should ensure that it has exclusive use of such variables by obtaining a lock that enforces mutual exclusion for those shared variables.
	Volatile members are never cached in CPU by jvm, they are always read from main memory i.e. from stack where variable lives.
	A compile-time error will occur if a final variable is declared volatile.
Can we have volatile methods in java?
	No, volatile is only a keyword, can be used only with variables.
Can we have synchronized variable in java?
	No, synchronized can be used only with methods, i.e. in method declaration.

when to use transient variable in Java? and those member variables will no more be a part of Serialization.

What is casting?
	byte -> short -> int -> long -> float -> double 
Can we have other return type than void for main method? NO
Can we overload main method ? Yes 
Can we overload static method in Java? Yes , but with diff parameters.
Ex- p.s.v.m(String[] args);
	p.s.v.m(String args);
	p.s.v.m();

Can we override main method? NO  
Can you override private or static method in Java? No you can not override	
Can we override static method? No 
Can we override toString()? Yes   
	In Java static binding refers to the execution of a program where type of object is determined/known at compile time i.e when compiler executes the code it know the type of object or class to which object belongs.While in case of dynamic binding the type of object is determined at runtime.

--Interface 
Is it possible to define class inside interface? Yes
Abstract class and interface? animals / habitat / land or water.
Can interface have constructor? No 
Can abstract class implements interface ? Yes, can implement more than one interface
Abstract class have constructors? Yes
Can we create abstract class without having abstract method? Yes
Performance implementation of interface over abstract class?
If two interface has same methods?
	Ex - 
		interface Gift{void present;}
		interface GiftPune{void present();}
		Above is allowed.

		interface Gift{void present;}
		interface GiftPune{Boolean present();}
		This is not allowed.
Synchronization - Capacity to control the access of multiple thread to any shared resource.
Serialization - Mechanism to write state of object into a byte stream.
	Object Serialization is a process used to convert the state of an object into a byte stream, which can be persisted into disk/file or sent over the network to any other running Java virtual machine. The reverse process of creating an object from the byte stream is called deserialization.

Serializable is marker interface.
	Marker interface is an interface with no method declared.
Marker Interface? Marker interface is an interface with no method declared.

Difference between Final , Finally , finalize
	Final - final can be applied to variable, method and class in java. We can define Final variable, method and class 
	Finally - finally is a block.
	Finalize - 	finalize is a method.

Diff betn ===,equal() and ==?
	== - checks for referential equality of object, it checks whether two references are referring to same object or not.

Implicit object in JSP?
	out	- JspWriter
	request	- HttpServletRequest
	response - HttpServletResponse
	config - ServletConfig
	application	- ServletContext
	session	- HttpSession
	pageContext	- PageContext
	page - Object
	exception -	Throwable

Why clone and finalize() method are declared as protected? To make sure that they are only called on subclass object rather than object class object.

Should variables be stored in local blocks?

What is mutable object and immutable object? 
	immutable - Any change made to object of immutable class produces new object. Ex- String And all other Wrapper classes.
	mutable class -  Any change made to object of mutable class doesn't produces new object. Ex HashMap is mutable class, 
Why string is immutable in Java? why there is need to make string immutable?
How to make class as immutable?
	Final Class
	Private final Member variable 
	Constructor 
	Don't provide setter methods 
	
Create immutable class?
	Dont use any method which can change fields of your class for example dont use setters.
	Avoid public fields and make it final and initialize it constructor.
	public final class ImmutableCname{
		final String variableName;
		public ImmutableCname(String variableName){
			this.variableName=variableName;
		}
		
		public getVariableName(){
			return variableName;
		}
	}

Creating string with new and ""?

Which two methods need to be override by object which later used as key in HashMap? equal() and hashcode()

Reference type in Java ? Strong Ref and weak Ref?
	Strong References - Any object which has an active strong reference are not eligible for garbage collection. MyClass obj = new MyClass ();   
	Weak References
	Soft References
	Phantom References

List<Number> number= List<Integer>


When to use String , StringBuffer , StringBuilder ?
	String - String is immutable that makes it a thread -safe class. / Fast
	StringBuffer - synchronized / Because of synchronized methods its slow. 
	StringBuilder - Not synchronized. / Fast

--MultiThreading
What is thread?
	Thread are light weight process. Used for multiprocessing 
Diff betn thread and process?
	One process can have multiple Threads,Thread are subdivision of Process.
	Threads can easily communicate with other threads of the same process using wait() and notify() methods.
What is life cycle of Thread, explain thread states? 
	New
	Runnable
	Running
	Waiting/blocked/sleeping
	Terminated (Dead) 
	
How do you implement thread in Java? Start() and run () methods?
	Threads can be created in two ways i.e. by 
		Implementing java.lang.Runnable interface.
			class MyRunnable implements Runnable{
				public void run(){   //overrides Runnable's run() method
					   System.out.println("in run() method");
					   System.out.println("currentThreadName= "+ Thread.currentThread().getName());
				}
			}
			public class MyClass {
				public static void main(String args[]){
					   System.out.println("currentThreadName= "+ Thread.currentThread().getName());
					   MyRunnable runnable=new MyRunnable(); 
					   Thread thread=new Thread(runnable);
					   thread.start();
				}
			}
		Extending java.lang.Thread class and then extending run method.
			class MyThread extends Thread{
				public void run(){
					sysout("In run method");
			}
			myClass{
				MyThread my=new Mythred();
				my.start();
			}
Thread pool 

Advantage of using thread?

How threads are synchronized? Synchronization acquires lock on method or block in which it is used.

Can we start a dead thread? No

Wait and sleep Method?
	when sleep() is called on thread it goes from running to waiting state and can return to runnable state when sleep time is up. when yield() method is called on thread it goes from running to runnable state, not in waiting state. Thread is eligible to run but not running and could be picked by scheduler at anytime.


How will you execute 4 thread in single core processor?

Why wait(),notify(),notifyAll() methods are placed in Object class?
	When wait() method is called on object by thread it waits for another thread on that object to release object monitor by calling notify() or notifyAll() method on that object.
	When notify() method is called on object by thread it notifies all the threads 
	which are waiting for that object monitor that object monitor is available now.
	So, this shows that wait(), notify() and notifyAll() are called on objects only.

** How loader works with respective content providers?

Does Thread implements their own Stack, if yes how?  Yes, Threads have their own stack.

Reflection in java? Reflection is an API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.
	Ex- Class cls = obj.getClass(); 

Enum ?
Can Enum Implements Interface 
can Enum Extends Class 
Can we create enum with out any instance?
Can we create instance of enum outside of Enum ? No, Enum does not have public constructor so compiler does not allow.
Can we declare constructor inside enum in Java? Yes only Private 
Public and protected are not allowed.
Enum implements comparable interface?
Enum is used in switch?


Decorator Strategy?
	Strategy_pattern
		Defines a family of algorithms,
		Encapsulates each algorithm, and
		Makes the algorithms interchangeable within that family.
		Use Strategy pattern when you have to change algorithm dynamically at run time.

	Decorator
		Decorator pattern dynamically changes the functionality of an object at runtime without impacting the existing functionality of the objects.
	When to use:
		Add additional functionalities/responsibilities dynamically
		Remove functionalities/responsibilities dynamically
		Avoid too much of sub-classing to add additional responsibilities.
		Drawbacks:

	Overuse of Open Closed principle ( Open for extension and Closed for modification). Use this feature sparingly where the code is least likely changed.
	Too many small classes and will add maintenance overhead.
	Key difference:	Strategy lets you change the guts of an object. Decorator lets you change the skin.

Diff between == and ===
	== - Check Equality 
	=== - Check equality and type 

How to connect to DB?
	Class.forName("com.mysql.jdbc.Driver");  - Driver class: The driver class for the mysql database is com.mysql.jdbc.Driver.
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/sonoo","root","root");  - Connection URL , Username , Password
	Statement stmt=con.createStatement();  
	ResultSet rs=stmt.executeQuery("select * from emp");  


Importing a package imports its sub packages as will in Java? No

When lot of change are required in data which one should be used string or stringbuffer? StringBuffer 

Can we call non static method from inside a static method? Yes we can call, Non static method are own by object of class and has object level scope and to call non static method from static method we need to create object of class first.

--Collection 
java.util.Collection  IS ROOT INTERFACE
java.util.Set extends java.util.Collection interface
java.util.list extends java.util.Collection interface

Hash - Insertion Order Not prevent
Tree - Sorted
Linked - Prevent Insertion Order

Set  - Not contain duplicate 
	HashSet, LinkedHashSet, TreeSet, ConcurrentSkipListSet classes implements Set interface.
List  - Ordered not contains duplicate
	ArrayList, LinkedList, Vector, CopyOnWriteArrayList classes implements List interface.
Map - Key , value not contains duplicate
Convert HashMap to ArrayList with Iterator?
How HashMap works?
How HashSet works?
Sort employee object based on salary?
Diff Vector and ArrayList?
How to make HashMap object synchronized with out using key value?
Default capacity of HashMap
Arraylist and linkedlist in Java?
HashSet and linkedHashset
Difference between iterator and enumeration?
	Enu - Only traverse the collection.  / hasMoreElement() , NextElement()
	Used to traverse legacy class like vector , hasTable , stack.
	Failsafe concurentHashmap.
	Itr - Traverse and remove. / hasNext() , next() , remove().
	Most classes in collection like ArrayList, HashSet, Linkedlist.
	Failfast Arraylist , vector , HashMap.
Iterator has remove method? Yes
Concurrent HashMap? It is synchronized map  which is divided into diff segments based on concurrency level diff thread can access diff seg concurrently.
What is Concurrent Hashmap? Compare it with Hashmap. 
Which methods you need to override to use any object as key in HashMap? equal and hashCode
Can we add a new entry to Hashmap while iterating?
How to sort used defined Object in Java? Comparable(compareTo()) and comparator(compare() and equal()).
List vs set 
HashMap vs HasTable?
ArrayList vs LinkedList?
equal vs hashTable?
ArrayList vs HashSet
compare HashMap / HashTable / Treemap?
HashSet / Linkedhashset /TreeSet?
ArrayList / LinkedList / Vector
Iterator is class or interface?
Legacy class?
HashCode and equal method contract?
Loadfactor and capacity ?
Stack implementation?
Reverse Array?
Four ways to check if an array contains a value?
	-	Arrays.asList(arr).contains("Value");
    -	<String> set=new HashSet<String>(Arrays.asList(arr));
		set.contains(value);
	- 	for(String s:arr){
			if(s.equals(value)){
				return true;
			}
		}
		
Convert map to list?
Iterate over each Entity in map?
Sort map on basis of key?
Equal and hashcode contract? 		
How to sort array?
How to store unique element in array?
Find duplicate in array?		
how to sort employee object in java ?		
Any key value pair collection in java where key has to be in sorted order? TreeMap , if we try to add any custome object as key to Treemap it will give us class cast exception 
I have a set of elements which are not duplicates. Which collection you would use to store these objects?		
Can you explain the hashing technique to make Java store all specific objects in one bucket? 


--Design patterns 
Do you have deep knowledge of design patterns? 
Singleton Pattern - Create only once class object through system. / One and only one instance of particular class is carted per classloader.
	Private constructor and static instance make class singleton.
prototype
Builder Pattern 
Abstract Factory 
Bridge
What is the design pattern used in Spring IOC? 
Do you know what design pattern is used in java IO stream?



--Exception 
Exception Hierarchy? 
Explain exception handling ? Checked and Unchecked Exception?
ClassNotFoundException and noClassDefination Exception?
	ClassNotFoundException is a runtime exception that is thrown when an application tries to load a class at runtime using the Class.forName() or loadClass() or findSystemClass() methods ,and the class with specified name are not found in the classpath. 
	
	NoClassDefFoundError is an error that is thrown when the Java Runtime System tries to load the definition of a class, and that class definition is no longer available. The required class definition was present at compile time, but it was missing at runtime. 

What will happen if we put return statement or system.exit(0) in try or catch block ? will finally block execute?
We can use return statement in finally block? Yes
Diff between throw , throws , throwable?
Can we catch multiple exception in same catch clause? Yes depends on inheritance hierarchy.

-----------------------------Generics-------------------------

What is the use of generics? How generics help developer?
Which case do you use ? (Question Mark) in generics? 

ACID properties - 
	Atomicity 
	Consistency 
	isolation 
	durability

Java exceptions Java 8, filter, map, reduce collection multithreading Java programming

1. Find the pair of integers in an array whose sum is x.

2. Merge Sort

3. https://leetcode.com/problems/n-queens/

4. https://leetcode.com/problems/sudoku-solver/solution/

5. https://leetcode.com/problems/combination-sum/description/

6.. https://www.programcreek.com/2014/04/leetcode-surrounded-regions-java/

7. Check a string contain 26 letters

8. there are lots brackets in a string , check if all of these brackets are paired for example : {[()]} is paired , {(}) is not

9. Find the length of max object in a list of objects

10. Given a string return true if it contains all the alphabets from a-z
	public static boolean checkStringForAllLetterUsingStream(String input) {
		long c = input.toLowerCase().chars()
		  .filter(ch -> ch >= 'a' && ch <= 'z')
		  .distinct()
		  .count();
		return c == 26;
	}
11. First one was to check the valid parentheses

12.Second one was to implement Math.pow(x,n)

13. Reverse the string by words. Like : Hello World, output: World, Hello

14.find duplicates in an array

15.Swap int no with out using temp?
 
16. Find the pair of integers in an array whose sum is x.
	public static void main(String[] args) {
		int[]  arr= {1,3,5,4,2,3,1};
		int sum=6;
		for (int i = 0; i < arr.length; i++) {
			for(int j=i+1;j<arr.length;j++) {
				
				if(arr[i]+arr[j]==sum) {
					System.out.println(arr[i]+""+""+arr[j] +"---Sum"+(arr[i]+arr[j])); 
				}
			}
		}

	}
18. Java exceptions

1) Algorithm part: - We have a list of candidates name, your mission is finding candidates voted more than half of the list of candidates. - NQueen or Sudoku problem. The link here: https://leetcode.com/problems/n-queens/
